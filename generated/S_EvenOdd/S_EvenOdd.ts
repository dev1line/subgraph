// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Bet extends ethereum.Event {
  get params(): Bet__Params {
    return new Bet__Params(this);
  }
}

export class Bet__Params {
  _event: Bet;

  constructor(event: Bet) {
    this._event = event;
  }

  get rollId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isEven(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class DiceRolled extends ethereum.Event {
  get params(): DiceRolled__Params {
    return new DiceRolled__Params(this);
  }
}

export class DiceRolled__Params {
  _event: DiceRolled;

  constructor(event: DiceRolled) {
    this._event = event;
  }

  get rollId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get diceNumber_1(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get diceNumber_2(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get isEven(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class S_EvenOdd__getPlayerInfoResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class S_EvenOdd__playersResult {
  value0: BigInt;
  value1: Address;
  value2: boolean;

  constructor(value0: BigInt, value1: Address, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class S_EvenOdd extends ethereum.SmartContract {
  static bind(address: Address): S_EvenOdd {
    return new S_EvenOdd("S_EvenOdd", address);
  }

  _cash(): Address {
    let result = super.call("_cash", "_cash():(address)", []);

    return result[0].toAddress();
  }

  try__cash(): ethereum.CallResult<Address> {
    let result = super.tryCall("_cash", "_cash():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _ticket(): Address {
    let result = super.call("_ticket", "_ticket():(address)", []);

    return result[0].toAddress();
  }

  try__ticket(): ethereum.CallResult<Address> {
    let result = super.tryCall("_ticket", "_ticket():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBetAmountOf(_account: Address): BigInt {
    let result = super.call(
      "getBetAmountOf",
      "getBetAmountOf(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_getBetAmountOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBetAmountOf",
      "getBetAmountOf(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDealerBalance(): BigInt {
    let result = super.call(
      "getDealerBalance",
      "getDealerBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDealerBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDealerBalance",
      "getDealerBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlayerInfo(_account: Address): S_EvenOdd__getPlayerInfoResult {
    let result = super.call(
      "getPlayerInfo",
      "getPlayerInfo(address):(uint256,bool)",
      [ethereum.Value.fromAddress(_account)]
    );

    return new S_EvenOdd__getPlayerInfoResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getPlayerInfo(
    _account: Address
  ): ethereum.CallResult<S_EvenOdd__getPlayerInfoResult> {
    let result = super.tryCall(
      "getPlayerInfo",
      "getPlayerInfo(address):(uint256,bool)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new S_EvenOdd__getPlayerInfoResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  isAlreadyBet(_account: Address): boolean {
    let result = super.call("isAlreadyBet", "isAlreadyBet(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBoolean();
  }

  try_isAlreadyBet(_account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAlreadyBet", "isAlreadyBet(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  players(param0: Address): S_EvenOdd__playersResult {
    let result = super.call(
      "players",
      "players(address):(uint256,address,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new S_EvenOdd__playersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBoolean()
    );
  }

  try_players(param0: Address): ethereum.CallResult<S_EvenOdd__playersResult> {
    let result = super.tryCall(
      "players",
      "players(address):(uint256,address,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new S_EvenOdd__playersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBoolean()
      )
    );
  }

  playersArray(param0: BigInt): Address {
    let result = super.call("playersArray", "playersArray(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_playersArray(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "playersArray",
      "playersArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rollId(): BigInt {
    let result = super.call("rollId", "rollId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rollId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rollId", "rollId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBetAmount(): BigInt {
    let result = super.call("totalBetAmount", "totalBetAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBetAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBetAmount",
      "totalBetAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBetAmountPerRoll(): BigInt {
    let result = super.call(
      "totalBetAmountPerRoll",
      "totalBetAmountPerRoll():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalBetAmountPerRoll(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBetAmountPerRoll",
      "totalBetAmountPerRoll():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dealer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ticketAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenCASH(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BetCall extends ethereum.Call {
  get inputs(): BetCall__Inputs {
    return new BetCall__Inputs(this);
  }

  get outputs(): BetCall__Outputs {
    return new BetCall__Outputs(this);
  }
}

export class BetCall__Inputs {
  _call: BetCall;

  constructor(call: BetCall) {
    this._call = call;
  }

  get _isEven(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BetCall__Outputs {
  _call: BetCall;

  constructor(call: BetCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RollDiceCall extends ethereum.Call {
  get inputs(): RollDiceCall__Inputs {
    return new RollDiceCall__Inputs(this);
  }

  get outputs(): RollDiceCall__Outputs {
    return new RollDiceCall__Outputs(this);
  }
}

export class RollDiceCall__Inputs {
  _call: RollDiceCall;

  constructor(call: RollDiceCall) {
    this._call = call;
  }
}

export class RollDiceCall__Outputs {
  _call: RollDiceCall;

  constructor(call: RollDiceCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
